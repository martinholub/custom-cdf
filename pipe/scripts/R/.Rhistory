if (length(unique(colnames(this_t))) == 1) next
# if (!(colnames(this_t)[2] %in% good_frames)) next
if (t %in% bad_tables) next
if (t %in% c("go")) this_t <- this_t[, 1:3]
dframes[[t]] <- this_t
i <- i + 1
}
# DBI::dbDisconnect(con)
do.call(AnnotationForge::makeOrgPackage, c(
dframes,
c(version = "0.1", maintainer = "MH <mholub@nebion.com>",
author = "MH <mholub@nebion.com>",
outputDir = org_db_dir,
tax_id = tax_id,
genus = species_parts[1],
species = paste0(species_parts[2], "hub"))))
file_flat = "~/tmp/CDF/OS/pipe/data/results/Rice_Agi_Oligo_results_entre.txt"
cdf_dir <- "~/tmp/CDF/OS/pipe/data/cdf" # pass as config
probe2gene <-read.table(file_flat, sep = "\t", col.names = list("probes", "genes"))
orgpkgname <- paste("org", paste0(substr(species_parts[1], 1,1), species_parts[2],"hub"),
"eg", "db", sep = ".")
pkg_path <- AnnotationForge::makeChipPackage(prefix = prefix,
probeFrame = probe2gene,
orgPkgName = orgpkgname,
outputDir = cdf_dir,
version = "0.0.1",
tax_id = tax_id,
genus = species_parts[1],
species = species_parts[2],
author = "MH <mholub@nebion.com>",
maintainer = "MH <mholub@nebion.com>",
optionalAccessionsFrame = dframes$accessions)
file_flat = "~/tmp/CDF/OS/pipe/data/results/Rice_Agi_Oligo_results_entre.txt"
cdf_dir <- "~/tmp/CDF/OS/pipe/data/cdf" # pass as config
probe2gene <-read.table(file_flat, sep = "\t", col.names = list("probes", "genes"))
orgpkgname <- paste("org", paste0(substr(species_parts[1], 1,1), species_parts[2],"hub"),
"eg", "db", sep = ".")
pkg_path <- AnnotationForge::makeChipPackage(prefix = prefix,
probeFrame = probe2gene,
orgPkgName = orgpkgname,
outputDir = cdf_dir,
version = "0.0.1",
tax_id = tax_id,
genus = species_parts[1],
species = species_parts[2],
author = "MH <mholub@nebion.com>",
maintainer = "MH <mholub@nebion.com>",
optionalAccessionsFrame = dframes$accessions)
# org.OSativa.eg.db, EnsDb.Osativa.v39
# riceagioligodbTEST.db::riceagioligodbTEST.db
# org.Rn.eg.db::org.Rn.eg.db
# rgug4131a.db::rgug4131a.db
con <- AnnotationDbi::dbconn(riceagioligodbTEST.db::riceagioligodbTEST.db)
DBI::dbListTables(con)
keys(con)
keys(riceagioligodbTEST.db::riceagioligodbTEST.db)
sort(myattr$names)
sort(myattr$names)
biomart <- "plants_mart"
host <- "plants.ensembl.org"
dset <- "osativa_eg_gene"
plant_ensembl <- biomaRt::useMart(biomart=biomart, host=host, dataset = dset)
plant_ensembl <- biomaRt::useMart(biomart=biomart, host=host, dataset = dset)
myattr <- biomaRt::listAttributes(plant_ensembl, "feature_page")
sort(myattr$names)
sort(myattr$name)
attrs <- myattr[grepl("agilent", myattr$name), ]
attrs
keys(hgug4112a.db)
keys(hgug4112a.db::hgug4112a.db)
keys(org.Hs.eg.db::org.Hs.eg.db)
keys(org.Osativahub.eg.db)
hgug4112a.db
hgu133plus2cdf::hgu133plus2cdf
hgug4112a.db::hgug4112a.db
org.Osativahub.eg.db
sort(myattr$name)
dbname <- AnnotationForge::makeOrgPackageFromNCBI(version = "0.1",
author = "MH <mholub@nebion.com>",
maintainer = "MH <mholub@nebion.com>",
outputDir = org_db_dir,
tax_id = tax_id,
databaseOnly = F,
genus = species_parts[1],
species = species_parts[2],
NCBIFilesDir = ncbi_db_dir,
rebuildCache = FALSE,
useDeprecatedStyle = TRUE)
# org.OSativa.eg.db, EnsDb.Osativa.v39
# riceagioligodbTEST.db::riceagioligodbTEST.db
# org.Rn.eg.db::org.Rn.eg.db
# rgug4131a.db::rgug4131a.db
con <- AnnotationDbi::dbconn(org.Osativahub.eg.db)
DBI::dbListTables(con)
DBI::dbListFields(con, "accessions")
head(DBI::dbGetQuery("SELECT * from accessions", con))
# org.OSativa.eg.db, EnsDb.Osativa.v39
# riceagioligodbTEST.db::riceagioligodbTEST.db
# org.Rn.eg.db::org.Rn.eg.db
# rgug4131a.db::rgug4131a.db
con <- AnnotationDbi::dbconn(org.Rn.eg.db::org.Rn.eg.db)
DBI::dbListTables(con)
DBI::dbListFields(con, "accessions")
DBI::dbListTables(con)
AnnotationForge::available.db0pkgs()
ahub <- AnnotationHub::AnnotationHub()
# ahub <- AnnotationHub::subset(ahub, taxonomyid == tax_id)
# id_species <- (data.frame(ahub$ah_id, ahub$species))
# ah_id <- as.character(id_species[grep(species_name, id_species$ahub.species, ignore.case = T), 1])
orgXXdb <- ahub[[ah_id]]
con <- AnnotationDbi::dbconn(orgXXdb)
tables <- DBI::dbListTables(con)
tables
con <- AnnotationDbi::dbconn(orgXXdb)
tables <- DBI::dbListTables(con)
dframes <- list()
# good_frames <- c("ACCNUM","ALIAS","CHR","ENTREZID","GENENAME","GO","GOALL","PMID","REFSEQ")
bad_tables <- c("metadata", "map_metadata", "map_counts", "go_all")
# DBI::dbListFields(con, "probes")
i <- 1
for (t in tables){
this_t <- (DBI::dbGetQuery(con, paste0("SELECT * FROM ",t)))
colnames(this_t)[1] <- "GID"
if (length(unique(colnames(this_t))) == 1) next
# if (!(colnames(this_t)[2] %in% good_frames)) next
if (t %in% bad_tables) next
if (t %in% c("go")) this_t <- this_t[, 1:3]
dframes[[t]] <- this_t
i <- i + 1
}
# DBI::dbDisconnect(con)
do.call(AnnotationForge::makeOrgPackage, c(
dframes,
c(version = "0.1", maintainer = "MH <mholub@nebion.com>",
author = "MH <mholub@nebion.com>",
outputDir = org_db_dir,
tax_id = tax_id,
genus = species_parts[1],
species = paste0(species_parts[2], "hub"))))
# org.OSativa.eg.db, EnsDb.Osativa.v39
# riceagioligodbTEST.db::riceagioligodbTEST.db
# org.Rn.eg.db::org.Rn.eg.db
# rgug4131a.db::rgug4131a.db
con <- AnnotationDbi::dbconn(rgug4131a.db::rgug4131a.db)
DBI::dbListTables(con)
DBI::dbListFields(con, "probes")
?DBI::dbGetQuery
head(DBI::dbGetQuery(con, "SELECT * from probes"))
# org.OSativa.eg.db, EnsDb.Osativa.v39
# riceagioligodbTEST.db::riceagioligodbTEST.db
# org.Rn.eg.db::org.Rn.eg.db
# rgug4131a.db::rgug4131a.db
con <- AnnotationDbi::dbconn(riceagioligodbTEST.db::riceagioligodbTEST.db)
DBI::dbListTables(con)
DBI::dbListFields(con, "probes")
head(DBI::dbGetQuery(con, "SELECT * from probes"))
keys(riceagioligodbTEST.db::riceagioligodbTEST.db)
keys(rgug4131a.db::rgug4131a.db)
con <- AnnotationDbi::dbconn(rgug4131a.db::rgug4131a.db)
DBI::dbListTables(con)
DBI::dbListFields(con, "probes")
head(DBI::dbGetQuery(con, "SELECT * from probes"))
keys(riceagioligodbTEST.db::riceagioligodbTEST.db)
columns(riceagioligodbTEST.db::riceagioligodbTEST.db)
columns(rgug4131a.db::rgug4131a.db)
probes <- (DBI::dbGetQuery(con, "SELECT PROBEID from probes"))
# org.OSativa.eg.db, EnsDb.Osativa.v39
# riceagioligodbTEST.db::riceagioligodbTEST.db
# org.Rn.eg.db::org.Rn.eg.db
# rgug4131a.db::rgug4131a.db
con <- AnnotationDbi::dbconn(riceagioligodbTEST.db::riceagioligodbTEST.db)
DBI::dbListTables(con)
DBI::dbListFields(con, "probes")
probes <- (DBI::dbGetQuery(con, "SELECT PROBEID from probes"))
?keys(riceagioligodbTEST.db::riceagioligodbTEST.db)
?AnnotationDbi::keys()
?AnnotationDbi::keys
AnnotationDbi:::keys
showMethods("keys")
AnnotationDbi:::keys(x="ChipDb")
?AnnotationDbi:::keys(x="ChipDb")
keys(riceagioligodbTEST.db::riceagioligodbTEST.db) <- probes
AnnotationDbi::keys(riceagioligodbTEST.db::riceagioligodbTEST.db) <- probes
?AnnotationForge::makeOrgPackageFromNCBI
org.Osativahub.eg.db
keys(org.Osativahub.eg.db)
# org.OSativa.eg.db, EnsDb.Osativa.v39
# riceagioligodbTEST.db::riceagioligodbTEST.db
# org.Rn.eg.db::org.Rn.eg.db
# rgug4131a.db::rgug4131a.db
con <- AnnotationDbi::dbconn(riceagioligodbTEST.db::riceagioligodbTEST.db)
DBI::dbListTables(con)
DBI::dbListFields(con, "probes")
?AnnotationDbi::keys
keytypes((riceagioligodbTEST.db::riceagioligodbTEST.db))
keytypes((rgug4131a.db::rgug4131a.db))
keys(rgug4131a.db::rgug4131a.db, "PROBEID")
keys(riceagioligodbTEST.db::riceagioligodbTEST.db, "PROBEID")
keys(riceagioligodbTEST.db::riceagioligodbTEST.db, "ACCNUM")
keys(riceagioligodbTEST.db::riceagioligodbTEST.db, "GID")
keys(riceagioligodbTEST.db::riceagioligodbTEST.db, "PROBEID") <- probes
Annotation:::.noSchemaKeys
AnnotationDbi:::.noSchemaKeys
?AnnotationForge::makeAnnDbPkg
org.Osativahub.eg.db
org.Rn.eg.db::org.Rn.eg.db
rgug4131a.db::rgug4131a.db
org.Osativa.eg.db::org.Osativa.eg.db
org.Osativahub.eg.db::org.Osativahub.eg.db
AnnotationForge::.getChipSchema("NOSCHEMA_DB")
?AnnotationForge
?AnnotationForge::AnnDbPkgSeed
?AnnotationDbi::as.data.frame
?AnnotationDbi::Bimap
?paste
# Test Class -------------------------------------------------------------------
setClass("TestSnake",
representation = list(input = "character", output = "character",
params = "character", config = "list"))
snakemake = new("TestSnake",
input = "~/tmp/CDF/OS/pipe/data/results/Rice_Agi_Oligo_results.txt",
output = "~/tmp/CDF/OS/pipe/data/cdf/riceagioligodb.db",
params = "Rice_Agi_Oligo",
config = list(platform = "Agilent",
species = "Oryza sativa Japonica",
cdf = list(dset = "osativa_eg_gene",
biomart = "plants_mart",
host = "plants.ensembl.org",
in_id = "ensembl_gene_id",
out_id = "",
attrs = c("entrezgene"))))
# Parse arguments -------------------------------------------------------------
## Either use script: file.R directive
file_flat <- snakemake@input[[1]]
file_db <- snakemake@output[[1]]
chip_name <- snakemake@params[[1]]
platform <- tolower(snakemake@config[["platform"]])
species_name <- tools::toTitleCase(snakemake@config[["species"]])
dset <- snakemake@config$cdf[["dset"]]
biomart <- snakemake@config$cdf[["biomart"]]
host <- snakemake@config$cdf[["host"]]
in_id <- snakemake@config$cdf[["in_id"]]
out_id <- snakemake@config$cdf[["out_id"]]
attrs <- snakemake@config$cdf[["attrs"]]
species_parts <- unlist(strsplit(species_name, " "))
# Setup Mart ------------------------------------------------------------------
##### This is how you explore biomaRt
# http://www.ensembl.info/2015/06/01/biomart-or-how-to-access-the-ensembl-data-from-r/
# dsets <- biomaRt::listDatasets(biomaRt::useMart(biomart=biomart,host=host))
mart <- biomaRt::useMart(biomart=biomart, host=host, dataset = dset)
align_data <- read.table(file_flat,
colClasses = c("character", "character"),
col.names = c("probe", in_id))
in_ids <- unique(align_data[, 2])
# in_ids <- unique(align_data[, 2])
in_ids <- align_data[, 2]
map_result <- biomaRt::getBM(attributes = attrs, mart = mart,
values = in_ids, filters = in_id,
uniqueRows = FALSE)
map_results
map_result
align_data <- read.table(file_flat,
colClasses = c("character", "character"),
col.names = c("probe", in_id))
# in_ids <- unique(align_data[, 2])
in_ids <- align_data[, 2]
if (!(in_id %in% attrs)){
attrs <- c(in_id, attrs)
}
map_result <- biomaRt::getBM(attributes = attrs, mart = mart,
values = in_ids, filters = in_id,
uniqueRows = FALSE)
map_result
# drop NAs and nonuiqnue mapings
map_result <- map_result[!(apply(map_result, 1, function(x) any(is.na(x)))), ]
map_result
map_result <- biomaRt::getBM(attributes = attrs, mart = mart,
values = in_ids, filters = in_id,
uniqueRows = FALSE)
biomaRt::listEnsembl(mart)
biomaRt::listMarts()
biomaRt::listAttributes(mart)
biomaRt::listAttributes(mart)$name
attrs <- biomaRt::listAttributes(mart, page = "featurePage")
biomaRt::listAttributes
?biomaRt::listAttributes
biomaRt::listAttributes(mart)
unique(biomaRt::listAttributes(mart)$page)
unique(biomaRt::listAttributes(mart, page = "sequences"))
unique(biomaRt::listAttributes(mart, page = "structure"))
sort(unique(biomaRt::listAttributes(mart, page = "feature_page")))
sort(unique(biomaRt::listAttributes(mart, page = "feature_page")$name))
(unique(biomaRt::listAttributes(mart, page = "feature_page")$name))
?grep
additional_attrs <- biomaRt::listAttributes(mart, "feature_page")$name
additional_attrs <- additional_attrs[grep(platform, additional_attrs)]
attrs
abc <- c("z", attrs, "z", "a")
uniq(abc)
unique(abc)
#################################### DO STUFF ##################################
library(methods)
# Test Class -------------------------------------------------------------------
setClass("TestSnake",
representation = list(input = "character", output = "character",
params = "character", config = "list"))
snakemake = new("TestSnake",
input = "~/tmp/CDF/OS/pipe/data/results/Rice_Agi_Oligo_results.txt",
output = "~/tmp/CDF/OS/pipe/data/cdf/riceagioligodb.txt",
params = "Rice_Agi_Oligo",
config = list(platform = "Agilent",
species = "Oryza sativa Japonica",
cdf = list(dset = "osativa_eg_gene",
biomart = "plants_mart",
host = "plants.ensembl.org",
in_id = "ensembl_gene_id",
out_id = "",
attrs = c("entrezgene", "ensembl_transcript_id",
"description", "external_gene_name",
"go_id", "embl"))))
# Parse arguments -------------------------------------------------------------
## Either use script: file.R directive
file_flat <- snakemake@input[[1]]
file_db <- snakemake@output[[1]]
chip_name <- snakemake@params[[1]]
platform <- tolower(snakemake@config[["platform"]])
species_name <- tools::toTitleCase(snakemake@config[["species"]])
dset <- snakemake@config$cdf[["dset"]]
biomart <- snakemake@config$cdf[["biomart"]]
host <- snakemake@config$cdf[["host"]]
in_id <- snakemake@config$cdf[["in_id"]]
out_id <- snakemake@config$cdf[["out_id"]]
attrs <- snakemake@config$cdf[["attrs"]]
species_parts <- unlist(strsplit(species_name, " "))
# Setup Mart ------------------------------------------------------------------
##### This is how you explore biomaRt
# http://www.ensembl.info/2015/06/01/biomart-or-how-to-access-the-ensembl-data-from-r/
# dsets <- biomaRt::listDatasets(biomaRt::useMart(biomart=biomart,host=host))
mart <- biomaRt::useMart(biomart=biomart, host=host, dataset = dset)
# Convert between naming schemes in_id <-> out_id ------------------------------
if (!(in_id == out_id | out_id == "")){
file_flat <- .remap_gene_symbols(file_flat, mart, in_id, out_id)
in_id <- out_id
}
align_data <- read.table(file_flat,
colClasses = c("character", "character"),
col.names = c("probe", in_id))
# in_ids <- unique(align_data[, 2])
if (!(in_id %in% attrs)){
attrs <- c(in_id, attrs)
}
# Add platform specifc attributes
do_add_platform_attributes <- FALSE
if (do_add_platform_attributes){
additional_attrs <- biomaRt::listAttributes(mart, "feature_page")$name
additional_attrs <- additional_attrs[grep(platform, additional_attrs)]
if (length(additional_attrs)>0){
attrs <- c(attrs, additional_attrs)
}
}
map_result <- biomaRt::getBM(attributes = unique(attrs), mart = mart,
values = in_ids, filters = in_id,
uniqueRows = FALSE)
in_ids <- unique(align_data[, 2])
map_result <- biomaRt::getBM(attributes = unique(attrs), mart = mart,
values = in_ids, filters = in_id,
uniqueRows = FALSE)
head(map_result)
map_result$ensembl_gene_id[map_result$ensembl_gene_id == "Os01g0229900"]
map_result$entrezgene[map_result$ensembl_gene_id == "Os01g0229900"]
map_result$ensembl_transcript_id[map_result$ensembl_gene_id == "Os01g0229900"]
?write.table
# Write results to file -----------------------------------------------------
write.table(combi_data, file = output,
quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
combi_data <- merge(align_data, map_result, all = FALSE, by = in_id)
head(combi_data)
tail(combi_data)
combi_data$probe
length(unique(combi_data$probe))
# Write results to file -----------------------------------------------------
write.table(combi_data, file = output,
quote = FALSE, sep = "\t", row.names = combi_data$probe, col.names = TRUE)
# Write results to file -----------------------------------------------------
write.table(combi_data, file = file_db,
quote = FALSE, sep = "\t", row.names = combi_data$probe, col.names = TRUE)
if ("cat") print(2)
if (length("cat")>0) print(2)
?file
source('~/git/git-dev/CustomCDF/pipe/scripts/R/make_annodb.R')
source('~/git/git-dev/CustomCDF/pipe/scripts/R/make_annodb.R')
source('~/git/git-dev/CustomCDF/pipe/scripts/R/make_annodb.R')
source('~/git/git-dev/CustomCDF/pipe/scripts/R/make_annodb.R')
source('~/git/git-dev/CustomCDF/pipe/scripts/R/make_annodb.R')
source('~/git/git-dev/CustomCDF/pipe/scripts/R/make_annodb.R')
source('~/git/git-dev/CustomCDF/pipe/scripts/R/make_annodb.R')
?read.table
db_data <- read.table(map_fpath, header = TRUE, sep = "\t",
row.names = "probe", fill = TRUE)
# Write results to file -----------------------------------------------------
map_fpath <- "~/tmp/CDF/OS/pipe/data/cdf/riceagioligodb.txt"
db_data <- read.table(map_fpath, header = TRUE, sep = "\t",
row.names = "probe", fill = TRUE)
db_data <- read.table(map_fpath, header = TRUE, sep = "\t", fill = TRUE)
# Write results to file -----------------------------------------------------
map_fpath <- "~/tmp/CDF/OS/pipe/data/cdf/riceagioligodb.txt"
db_data <- read.table(map_fpath, header = TRUE, sep = "\t", fill = TRUE,
quote = "", stringsAsFactors = FALSE)
# Write results to file -----------------------------------------------------
write.table(combi_data, file = file_db,
quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
# Write results to file -----------------------------------------------------
map_fpath <- "~/tmp/CDF/OS/pipe/data/cdf/riceagioligodb.txt"
db_data <- read.table(map_fpath, header = TRUE, sep = "\t", fill = TRUE,
quote = "", stringsAsFactors = FALSE)
head(db_data)
?which
dups_names <- c("A_71_P100229","A_71_P100231","A_71_P100232","A_71_P100063",
"A_71_P100065","A_71_P100066","A_71_P101061","A_71_P101062","A_71_P101063",
"A_71_P101064")
idxer <- match(dups_names, db_data$probe)
idxer
?match
idxer <- (dups_names %in% db_data$probe)
idxer <- match(dups_names,  db_data$probe)
idxer
idxer <- which(!is.na(match(db_data$probe, dups_names)))
idxer
dups_names <- c("A_71_P100229","A_71_P100231","A_71_P100232","A_71_P100063",
"A_71_P100065","A_71_P100066","A_71_P101061","A_71_P101062","A_71_P101063",
"A_71_P101064")
idxer <- which(!is.na(match(db_data$probe, dups_names)))
idxer
# idxer <- which(!is.na(match(db_data$probe, dups_names)))
idxer <- match(dups_names, db_data$probe)
idxer
gene_id <- unlist(unique(db_data$ensembl_gene_id[idxer]))
gene_id
gene_id <- db_data$ensembl_gene_id[idxer]
gene_id
?DBI::dbWriteTable()
?RSQLite::SQLite()
gene_id
paste(gene_id, collapse=",")
paste(gene_id[1], collapse=",")
paste(gene_id[[1], collapse=",")
paste(gene_id[[1]], collapse=",")
# Write results to file -----------------------------------------------------
map_fpath <- "~/tmp/CDF/OS/pipe/data/cdf/riceagioligodb.txt"
col_names <- c("ensembl_gene_id", "entrezgene", "go_id", "external_gene_name")
db_data <- read.table(map_fpath, header = TRUE, sep = "\t", fill = TRUE,
quote = "", stringsAsFactors = FALSE)
dups_names <- c("A_71_P100229","A_71_P100231","A_71_P100232","A_71_P100063",
"A_71_P100065","A_71_P100066","A_71_P101061","A_71_P101062","A_71_P101063",
"A_71_P101064")
i <- 1
info <- list()
for (pr in dups_names){
for (cl in col_names){
idxer <- db_data$probe == pr
info[[cl]] <- paste(unique(db_data[[cl]][idxer]), collapse = ",")
}
}
i <- 1
info <- list()
for (pr in dups_names){
for (cl in col_names){
idxer <- db_data$probe == pr
info[[pr]] <- paste(unique(db_data[[cl]][idxer]), collapse = ",")
}
}
info <- list()
for (pr in dups_names){
idxer <- db_data$probe == pr
for (cl in col_names){
info[[pr]][[cl]] <- paste(unique(db_data[[cl]][idxer]), collapse = ",")
}
}
info$A_71_P100229
class(info$A_71_P100229)
as.data.frame(info)
?as.data.frame
t(as.data.frame(info))
dimnames(t(as.data.frame(info)))
?data.frame
for (pr in dups_names){
idxer <- db_data$probe == pr
for (cl in col_names){
info[[pr]][[cl]] <- paste(unique(db_data[[cl]][idxer]), collapse = ",")
}
}
dframe1 <- t(as.data.frame(info))
dframe2 <- data.frame(dups_reps[], round(CVmat, 3),
row.names = rownames(dframe1))
colnames(dframe2) <- c("nReps", colnames(elist))
dframe <- cbind(dframe1, dframe1)
dframe1 <- t(as.data.frame(info))
dframe1
rownames(dframe1)
?as.data.frame
AnnotationForge::available.dbschemas()
?AnnotationForge::makeDBPackage
?AnnotationForge::makeDBPackage
"NOCHIP" %in% "NOCHIP_DB"
grepl(c("NOCHIP", "NOSCHEMA"), "NOCHIP_DB", ignore.case = T)
grepl("NOCHIP|NOSCHEMA", "NOCHIP_DB", ignore.case = T)
"cat" == ""
"cat" == "" | "" == ""
getwd()
"cat" == NULL | "" == ""
"cat" == NULL | NULL == ""
?is.null
